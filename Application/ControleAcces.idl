/************************************
* Contrat IDL de controle d'acces *
************************************/

module ControleAcces {

	/**
	 * Définition des types
	 */
	typedef long IdPersonne;
	typedef string Nom;
	typedef string Prenom;
	typedef string Login;
	typedef string Password;
	typedef string Photo;
	typedef string IdEmpreinte;
	typedef string Empreinte;
	typedef long Date;
	typedef string TypeAcces;
	typedef boolean Permanent;
	typedef long IdPorte;
	typedef string NomZone;
	typedef string IdLog;
	typedef string TypeLog;
	typedef string DescriptionLog;
	typedef string APIPrive;
    typedef string APIPublic;

	typedef sequence <IdEmpreinte> SequenceIdEmpreinte;

	/*
	 * Définition des structures
	 * Mettre le minimum de paramètre, uniquement ce qu'on va utiliser
	 */

	struct Personne {
		IdPersonne idPersonne;
		Nom nom;
		Prenom prenom;
		Login login;
		Photo photo;
		Date jourAutorisationDebut;
		Date jourAutorisationFin;
		Date heureDebut;
		Date heureFin;
		Permanent estPermanent;
		IdEmpreinte idEmpreinteCrypte;
	};

	struct Log {
		IdLog idLog;
		TypeLog typeLog;
		Date dateLog;
		DescriptionLog descriptionLog;
	};


	/*
	 * Définition des exceptions
	 */
	exception AccesRefuse { string raison; };
	exception ZoneInconnue { string raison; };
	exception PorteInconnue { string raison; };
	exception PersonneInconnue { Personne personne; };
	exception PersonneDejaExistante { Personne personne; };
	exception PhotoInexistante { Photo idPhoto; };
	exception EmpreinteDejaExistante { Empreinte empreinte; };
	exception EmpreinteInconnue { Empreinte empreinte; };
	exception AucunLogDisponible { string raison; };
	exception EcritureImpossible { string raison; };
	exception APIIncorrecte { string raison; };

    interface RelaiDeZone {
        string demandeAcces(in Photo photo, in Empreinte empreinte) raises (PorteInconnue, AccesRefuse);
    };

    interface Annuaire {
    	/*
    	La porte est déjà identifier auprès d'une liste blanche. Elle possède cependant la clé API en dur lui permettant de faire les requetes
    	*/

        IdEmpreinte verificationPhoto(in Photo photo, in APIPublic apiPublic) raises (PhotoInexistante, APIIncorrecte);
        Personne verificationPersonne(in Nom nom, in Prenom prenom, in Photo photo, in APIPublic apiPublic) raises (PhotoInexistante, PersonneInconnue, APIIncorrecte);
        APIPrive authentification(in Login login, in Password password, in APIPublic apiPublic) raises (PersonneInconnue, APIIncorrecte);

        void ajoutPersonne(in Nom nom, in Prenom prenom, in Login login, in Password password, in Photo photo, in APIPrive apiPrive) raises (PersonneDejaExistante, APIIncorrecte);
        void ajoutPhotoPersonne(in Personne personne, in Photo photo, in APIPrive apiPrive) raises (PersonneInconnue, APIIncorrecte);
        void modificationEmpreintePersonne(in Personne personne, in IdEmpreinte idEmpreinteCrypte, in APIPublic apiPublic) raises (PersonneInconnue, APIIncorrecte);
        void modificationPersonne(in Personne personne, in Nom nomNew, in Prenom prenomNew, in Photo photoNew, in Login loginNew, in Password passwordNew, in APIPrive apiPrive) raises (PersonneInconnue, APIIncorrecte);
        void supprimerPersonne(in Personne personne, in APIPrive apiPrive) raises (PersonneInconnue, APIIncorrecte);

        Personne consultationPersonne(in Nom nom, in Prenom prenom, in APIPrive apiPrive) raises (PersonneInconnue, APIIncorrecte);
        Personne consultationPersonneBiometrique(in IdEmpreinte idEmpreinteCrypte, in APIPublic apiPublic) raises (PersonneInconnue, APIIncorrecte);

        SequenceIdEmpreinte demandeSuppressionEmpreinte(in APIPublic apiPublic);

    };

    interface Autorisation {
        void ajoutAutorisation(in Personne personne, in NomZone zone, in APIPrive apiPrive) raises (PersonneInconnue, APIIncorrecte);
        void modificationAutorisation(in Personne personne, in NomZone nouvelleZone, in APIPrive apiPrive) raises (PersonneInconnue, APIIncorrecte);
        void supprimerAutorisation(in Personne personne, in NomZone zone, in APIPrive apiPrive) raises (PersonneInconnue, APIIncorrecte);
    };

    interface Biometrique {
       boolean verificationEmpreinte(in IdEmpreinte idEmpreinteCrypte, in Empreinte empreinte, in APIPublic apiPublic) raises (EmpreinteInconnue, APIIncorrecte);
       IdEmpreinte ajoutEmpreinte(in Empreinte empreinte, in APIPublic apiPublic) raises (EmpreinteDejaExistante, APIIncorrecte);
       void modificationEmpreinte(in IdEmpreinte idEmpreinteCrypte, in Empreinte nouvelleEmpreinte, in APIPublic apiPublic) raises (EmpreinteInconnue, APIIncorrecte);
       void suppressionEmpreinte(in Empreinte empreinte, in APIPublic apiPublic) raises (EmpreinteInconnue, APIIncorrecte);
       IdEmpreinte identificationBiometrique(in Empreinte empreinte, in APIPublic apiPublic) raises (EmpreinteInconnue, APIIncorrecte);
    };

    interface Logs {
       string demandeConsultationLog(in Date date, in APIPrive apiPrive) raises (AucunLogDisponible);
       oneway void ecrireLog(in TypeLog typeLog, in DescriptionLog descriptionLog) raises (EcritureImpossible);
    };
};